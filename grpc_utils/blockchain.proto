syntax = "proto3";

//blockchain service and the function definition
service BlockChain {
  rpc initTxList(InitTxListRequest) returns (InitTxListResponse) {}
  rpc addNewBlock(AddBlockRequest) returns (AddBlockResponse) {}
  rpc QueryBlockchain(QueryBlockchainRequest) returns (QueryBlockchainResponse) {}
  //For step 3
  rpc QueryBlock(QueryBlockRequest) returns (QueryBlockResponse) {}
  rpc receiveBlock(ReceiveBlockRequest) returns (ReceiveBlockResponse) {}
  rpc receiveMessage(receiveMessageRequest) returns (receiveMessageResponse) {}
  rpc getUTXOs(getUTXOsRequest) returns (getUTXOsResponse){}
  rpc getState(getStateRequest) returns (getStateResponse) {}
  rpc getchain(getchainRequest) returns (getchainResponse){}
  rpc sendTransaction(sendTransactionRequest) returns (sendTransactionResponse) {}
  rpc addNewtransaction(addNewRequest) returns (addNewResponse) {}
  rpc QueryDB(QueryDBRequest) returns (QueryDBResponse) {}
//  rpc QueryLatestBlockIdx(QueryLatestBlockIdxRequest) returns (QueryLatestBlockIdxResponse) {}
}

message InitTxListRequest{
  string message = 1;
}

message InitTxListResponse{
  string message = 1;
}

//request message definition
//expectHash used to guess the target hash
message AddBlockRequest {
  string transaction = 1;
  int32 nonce = 2;
}
//response message definition
//hash means the address of the new block
message AddBlockResponse {
  string hash = 1;
  Block newBlock = 2;
}

//block transaction structure definition
//the block definition is same as bc_struct_def.py
message Block {

  int32 index = 1;
  string hash = 2;
  string prevBlockHash = 3 ;
  string rootHash = 4;
  int32 nonce = 5;
  string timestamp = 6;

  repeated Transaction transactionList = 8;
}

message Transaction {
  string TxId = 1;
  repeated TxIn TxInList = 2;
  repeated TxOut TxOutList = 3;

}

message TxIn {
  string TxOutId = 1;
  int32 TxOutIndex = 2;
  string signature = 3;
}

message TxOut {
  string address = 1;
  double amount = 2;
}

//request message definition
message QueryBlockchainRequest {
  string message = 1;
}

//response message definition
message QueryBlockchainResponse {
  repeated Block blocks = 1;
}

//For Step 3
message QueryBlockRequest {
  string message = 1;
}

message QueryBlockResponse {
  Block block = 1;
}

message ReceiveBlockRequest{
  string message = 1;
  Block newBlock = 2;
}

message ReceiveBlockResponse{
  string message = 1;
}

message UTXOs {
  repeated string key = 1;
  repeated double amount = 2;
  repeated string owner = 3;
}

message getUTXOsRequest{
  string message = 1;

}

message getUTXOsResponse{
  string message = 1;
  UTXOs utxos = 2;
}

message getStateRequest{
  int32 message = 1;
}

message getStateResponse{
  string message = 1;
}

message getchainRequest {
  string getchainRequest = 1;
}

message getchainResponse {
  repeated Block blocks = 1;
}

message addNewRequest {
  Transaction addnew = 1;
}

message addNewResponse {
  string addresult = 1;
}

message sendTransactionRequest {
  Transaction newtransaction = 1;
}

message sendTransactionResponse {
  string whethercantransfer = 1;
}

message QueryDBRequest{
  string message = 1;
}

message QueryDBResponse{
  string message = 1;
}

message QueryLatestBlockIdxRequest{
  string message = 1;
}

message QueryLatestBlockIdxResponse {
  int32 index = 1;
}

message receiveMessageRequest{
  string message = 1;
}

message receiveMessageResponse {
  string message = 1;
  Block newBlock = 2;
}